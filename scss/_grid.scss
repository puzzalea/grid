/*!
 * Puzzle Grid v1.2.0 by Puzzalea
 * Docs: https://github.com/puzzalea/grid
 */

@mixin make_columns($size) {
    @for $i from 1 through $col_num {
        .#{$prefix}col.#{$prefix}#{$size}-#{$i} {
            @include flex-basis(100% / $col_num * $i);
            width: 100% / $col_num * $i;
        }
    }
    
    .#{$prefix}col {
        &.#{$prefix}#{$size}-left-0 {
            margin-left: 0;
        }

        &.#{$prefix}#{$size}-right-0 {
            margin-right: 0;
        }
    }

    @for $i from 1 to $col_num {
        .#{$prefix}col {
            &.#{$prefix}#{$size}-left-#{$i} {
                margin-left: 100% / $col_num * $i;
            }

            &.#{$prefix}#{$size}-right-#{$i} {
                margin-right: 100% / $col_num * $i;
            }
        }
    }

    @each $name, $value in $miscellaneous-widths {
        .#{$prefix}col {
            &.#{$prefix}#{$size}-#{$name} {
                @include flex-basis(100% / $col_num * $value);
                width: 100% / $col_num * $value;
            }
    
            &.#{$prefix}#{$size}-left-#{$name} {
                margin-left: 100% / $col_num * $value;
            }
    
            &.#{$prefix}#{$size}-right-#{$name} {
                margin-right: 100% / $col_num * $value;
            }
        }
    }
    
    .#{$prefix}col {
        &.#{$prefix}#{$size}-center {
            margin: 0 auto;
        }
        
        &.#{$prefix}#{$size}-uncenter {
            margin: 0;
        }
        
        &.#{$prefix}#{$size}-fill {
            @include flex-grow(1);
        }
        
        &.#{$prefix}#{$size}-unfill {
            @include flex-grow(0);
        }
    }
    
    .#{$prefix}#{$size}-show {
        display: block;
    }
    
    .#{$prefix}row.#{$prefix}#{$size}-show {
        @include display-flex;
    }
    
    span.#{$prefix}#{$size}-show {
        display: inline;
    }
    
    .#{$prefix}#{$size}-hide {
        display: none;
    }
    
    @if map-has-key($col-inner-top-bottom-margin, $size) or map-has-key($col-inner-left-right-margin, $size) or map-has-key($col-inner-padding, $size) {
        .#{$prefix}col-inner {
            @if map-has-key($col-inner-left-right-margin, $size) {
                $left-right-margin: map-get($col-inner-left-right-margin, $size);
                @if $left-right-margin == 0 {
                    width: 100%;
                } @else {
                    width: calc(100% - #{$left-right-margin * 2});
                }
                margin-left: $left-right-margin;
                margin-right: $left-right-margin;
            }
            @if map-has-key($col-inner-top-bottom-margin, $size) {
                $top-bottom-margin: map-get($col-inner-top-bottom-margin, $size);
                margin-top: $top-bottom-margin;
                margin-bottom: $top-bottom-margin;
            }
            @if map-has-key($col-inner-padding, $size) {
                padding: map-get($col-inner-padding, $size);
            }
        }
    }
}

.#{$prefix}row, .#{$prefix}col, .#{$prefix}col-inner {
    box-sizing: border-box;
}

.#{$prefix}row {
    @include display-flex;
    @include flex-wrap(wrap);
    max-width: $max-width;
    margin: 0 auto;
}

.#{$prefix}col {
    @include flex(0 1 auto);
    min-width: 0;
}

@each $size, $value in $sizes {
    @if $value == 0 {
        @include make_columns($size);
    } @else {
        @include breakpoint($value) {
            @include make_columns($size);
        }
    }
}
